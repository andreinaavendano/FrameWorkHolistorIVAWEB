{"name": "Log incorrecto Tenant no existe", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x01143853+24035]\n\t(No symbol) [0x010CBBE4]\n\t(No symbol) [0x00FAC2D3]\n\t(No symbol) [0x00FEDC86]\n\t(No symbol) [0x00FEDECB]\n\t(No symbol) [0x0102B9D2]\n\t(No symbol) [0x0100FED4]\n\t(No symbol) [0x0102953F]\n\t(No symbol) [0x0100FC26]\n\t(No symbol) [0x00FE218C]\n\t(No symbol) [0x00FE310D]\n\tGetHandleVerifier [0x013E9683+2800659]\n\tGetHandleVerifier [0x0144423E+3172302]\n\tGetHandleVerifier [0x0143CE52+3142626]\n\tGetHandleVerifier [0x011E6C00+692624]\n\t(No symbol) [0x010D4BFD]\n\t(No symbol) [0x010D1908]\n\t(No symbol) [0x010D1AA0]\n\t(No symbol) [0x010C3F50]\n\tBaseThreadInitThunk [0x753DFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7716809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7716806E+238]", "trace": "login_plataforma_page = <pages.login_plataforma_page.LoginPlataformaPage object at 0x00000246467EB350>\n\n    @allure.suite(\"Casos de prueba de la pagina reports de Plataforma\")\n    @allure.epic(\"reports\")\n    @allure.feature(\"P치gina de reports en Plataforma\")\n    @allure.story(\"US: reports\")\n    @allure.testcase(\"TC - 0009\")\n    @allure.title(\"Log incorrecto Tenant no existe\")\n    @allure.description(\"Este test verifica que no se puede loguear en un tenant que no existe\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.login\n    @pytest.mark.ui\n    def test_login_plataforma_error_tenant(login_plataforma_page):\n        # declaracion\n        tenan = \"Agenda220220\"\n        usuario = \"Andreina\"\n        clave = \"123qwe\"\n        with allure.step(\"Navegar en la pagina de inicio de plataforma\"):\n            login_plataforma_page.navegar_login_plataforma()\n    \n        with allure.step(\"Setear los datos correctos en los campos Tenant, Usuario, Contrase침a\"):\n>           login_plataforma_page.set_user_inputs(tenan, usuario, clave)\n\ntests\\test_login_plataforma.py:250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_plataforma_page.py:88: in set_user_inputs\n    self.type_text(self.TENANT_BOX, tenant)\npages\\base_page.py:24: in type_text\n    element = self.wait_for_element(locator)\npages\\base_page.py:16: in wait_for_element\n    return WebDriverWait(self.driver, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"5bb4adab97bf6e8747740d8653fde4a4\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000002464683C0E0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x01143853+24035]\nE       \t(No symbol) [0x010CBBE4]\nE       \t(No symbol) [0x00FAC2D3]\nE       \t(No symbol) [0x00FEDC86]\nE       \t(No symbol) [0x00FEDECB]\nE       \t(No symbol) [0x0102B9D2]\nE       \t(No symbol) [0x0100FED4]\nE       \t(No symbol) [0x0102953F]\nE       \t(No symbol) [0x0100FC26]\nE       \t(No symbol) [0x00FE218C]\nE       \t(No symbol) [0x00FE310D]\nE       \tGetHandleVerifier [0x013E9683+2800659]\nE       \tGetHandleVerifier [0x0144423E+3172302]\nE       \tGetHandleVerifier [0x0143CE52+3142626]\nE       \tGetHandleVerifier [0x011E6C00+692624]\nE       \t(No symbol) [0x010D4BFD]\nE       \t(No symbol) [0x010D1908]\nE       \t(No symbol) [0x010D1AA0]\nE       \t(No symbol) [0x010C3F50]\nE       \tBaseThreadInitThunk [0x753DFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x7716809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x7716806E+238]\n\nTestEnv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "Este test verifica que no se puede loguear en un tenant que no existe", "steps": [{"name": "Navegar en la pagina de inicio de plataforma", "status": "passed", "start": 1729725592330, "stop": 1729725592693}, {"name": "Setear los datos correctos en los campos Tenant, Usuario, Contrase침a", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x01143853+24035]\n\t(No symbol) [0x010CBBE4]\n\t(No symbol) [0x00FAC2D3]\n\t(No symbol) [0x00FEDC86]\n\t(No symbol) [0x00FEDECB]\n\t(No symbol) [0x0102B9D2]\n\t(No symbol) [0x0100FED4]\n\t(No symbol) [0x0102953F]\n\t(No symbol) [0x0100FC26]\n\t(No symbol) [0x00FE218C]\n\t(No symbol) [0x00FE310D]\n\tGetHandleVerifier [0x013E9683+2800659]\n\tGetHandleVerifier [0x0144423E+3172302]\n\tGetHandleVerifier [0x0143CE52+3142626]\n\tGetHandleVerifier [0x011E6C00+692624]\n\t(No symbol) [0x010D4BFD]\n\t(No symbol) [0x010D1908]\n\t(No symbol) [0x010D1AA0]\n\t(No symbol) [0x010C3F50]\n\tBaseThreadInitThunk [0x753DFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x7716809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x7716806E+238]\n\n", "trace": "  File \"F:\\Projects\\Selenium\\SeleniumPython\\FrameWorkHolistorIVAWEB\\tests\\test_login_plataforma.py\", line 250, in test_login_plataforma_error_tenant\n    login_plataforma_page.set_user_inputs(tenan, usuario, clave)\n  File \"F:\\Projects\\Selenium\\SeleniumPython\\FrameWorkHolistorIVAWEB\\pages\\login_plataforma_page.py\", line 88, in set_user_inputs\n    self.type_text(self.TENANT_BOX, tenant)\n  File \"F:\\Projects\\Selenium\\SeleniumPython\\FrameWorkHolistorIVAWEB\\pages\\base_page.py\", line 24, in type_text\n    element = self.wait_for_element(locator)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\Projects\\Selenium\\SeleniumPython\\FrameWorkHolistorIVAWEB\\pages\\base_page.py\", line 16, in wait_for_element\n    return WebDriverWait(self.driver, timeout).until(\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"F:\\Projects\\Selenium\\SeleniumPython\\FrameWorkHolistorIVAWEB\\TestEnv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1729725592693, "stop": 1729725603149}], "start": 1729725592330, "stop": 1729725603149, "uuid": "506e1912-a933-4403-bd9f-ddd1e7bdb95f", "historyId": "b10ab476c516c1c41571df1ec3fa75b0", "testCaseId": "b10ab476c516c1c41571df1ec3fa75b0", "fullName": "tests.test_login_plataforma#test_login_plataforma_error_tenant", "labels": [{"name": "epic", "value": "reports"}, {"name": "severity", "value": "normal"}, {"name": "suite", "value": "Casos de prueba de la pagina reports de Plataforma"}, {"name": "feature", "value": "P치gina de reports en Plataforma"}, {"name": "story", "value": "US: reports"}, {"name": "tag", "value": "ui"}, {"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "tests"}, {"name": "host", "value": "DESA03"}, {"name": "thread", "value": "20860-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_plataforma"}], "links": [{"type": "tms", "url": "TC - 0009", "name": "TC - 0009"}]}